body {
	background-color: #ffffff;
}

.container {
	margin: 0 auto;
	width: 960px;
	font-size: 100%;
	line-height: 1.5;
}

/* TYPOGRAPHY */

h1 {
	text-align: center;
	font-weight: 600;
	font-family: Helvetica, Verdana, sans-serif;
	font-size: 36px;
	margin: 30px 0;
}

/* YOUR STYLES */

body {
    background: rgba(0, 0, 0, 0.01);
    font-family: Verdana, sans-serif;
}

.container {
    width: 960px;
    margin: 0 auto;
    font-size: 100%;
    line-height: 1.5
	
}


/*CLEAR FIX SOLLUTION*/

.clearfix:before,
.clearfix:after {
    content: " ";
    /* 1 */
    display: table;
    /* 2 */
}

.clearfix:after {
    clear: both;
}


/**
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */

.clearfix {
    *zoom: 1;
}

/**********************************************************************
    The default display of elemements at your page is called "Stacked"

    to get your elements on the same line, we use somethings called FlexBox
    to invoked flexbox use the rule
        display;flex;

    flexbox attempts to place all elements within its immediate specified container area 
        on the same line

    Immediete? the next level of elements

    flexbox will automatically adjust measurement to get all elements 
    to appear on the same line. Regardless of physical width set for the element

    problem : I dont want all elements on the same line having their 
        measurements altered
    solution: alter the default wrapping for flexbox which is nothing

    rule: flex-wrap; wrap;

    this will place as many elements as possible on a single row 
        without adjusting the measurements of your elements.
    any leftover elements will wrap to the following line until
        all elements have been displayed

    warning: flex-wrap affect a flex display area without the display flex
        rule flex

    Flexbox will affect positioning that is normal within your page such
        as margin collapse
**********************************************************************/
main{
    background-color: lightgray;
    display: flex;
	border: 2px solid black;
}

/* 
Give the classes some heights and widthdue to the fact that the elements do not contain any text tool content
set height to chosen value of 300px
set the width of each box to fit the final given image
margin:30px
padding and border = 0
page width = 960px
page width is equal to n(representing the cloumns) x (box) + remainder
960 = 2 * (box) + (box) + remainder
our boxes are of an equal side
960 = 2 * (lm + lb + lp + content + rp + rb + lm) + remainder
960 = 2 (30 + 0 + 0 + content + 0 + 0 + 0) + 30
960 = 60 + 30 + 2content
960 - 90 = 2content
870 / 2 = content
435 = content 

*/

.red-paint{
    height: 300px;
    width: 435px;
    background-color: red;
    margin-left: 10px;
    margin-top: 10px;
    margin-bottom: 10px;
	border: 2px solid black;
}
.blue-paint{
    height: 300px;
    width: 435px;
    background-color: blue;
    margin: 10px 10px 10px 10px;
	border: 2px solid black;
}
.yellow-paint{
    height: 300px;
    width: 435px;
    background-color: yellow;
    margin: 10px 10px 10px 10px;
	border: 2px solid black;
}

/*
960 = 2 * (lm + lb + lp + content + rp + rb + lm) + remainder
960 = 2 (30 + 0 + 0 + content + 0 + 0 + 0) + 30
960 = 60 + 30 + 2content
960 - 90 = 2content
870 / 2 = content
435 = content 

960 = 0 + 0 + 0 + 110 + 0 + 0 + 0 
960 = 110
850 = 

960 - 60 + content
900 = content
*/

